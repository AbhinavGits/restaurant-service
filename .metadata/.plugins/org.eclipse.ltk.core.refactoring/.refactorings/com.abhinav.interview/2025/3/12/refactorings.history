<?xml version="1.0" encoding="UTF-8"?>
<session version="1.0">&#x0A;<refactoring comment="Extract local variable &apos;charArray&apos; from expression &apos;str1.toCharArray()&apos;&#x0D;&#x0A;- Original project: &apos;com.abhinav.interview&apos;&#x0D;&#x0A;- Variable name: &apos;charArray&apos;&#x0D;&#x0A;- Destination method: &apos;com.abhinav.intrvw.coding.CodingExample1.main(...)&apos;&#x0D;&#x0A;- Variable expression: &apos;str1.toCharArray()&apos;&#x0D;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;charArray&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;com.abhinav.intrvw.coding{CodingExample1.java" name="charArray" replace="true" replaceAllInThisFile="false" selection="279 18" stamp="1742289108968" varType="false" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;charsMap&apos; from expression &apos;listOfStrings.stream().flatMapToInt(ch -&gt; ch.chars()).mapToObj(ch -&gt; (char)ch).collect(Collectors.groupingBy(Function.identity(),Collectors.counting()))&apos;&#x0D;&#x0A;- Original project: &apos;com.abhinav.interview&apos;&#x0D;&#x0A;- Variable name: &apos;charsMap&apos;&#x0D;&#x0A;- Destination method: &apos;com.abhinav.interview.coding.review.ListOfStringsToFrequencyMap.main(...)&apos;&#x0D;&#x0A;- Variable expression: &apos;listOfStrings.stream().flatMapToInt(ch -&gt; ch.chars()).mapToObj(ch -&gt; (char)ch).collect(Collectors.groupingBy(Function.identity(),Collectors.counting()))&apos;&#x0D;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;charsMap&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;com.abhinav.interview.coding.review{ListOfStringsToFrequencyMap.java" name="charsMap" replace="true" replaceAllInThisFile="false" selection="340 153" stamp="1742398627046" varType="false" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;collect&apos; from expression &apos;Arrays.stream(arr).boxed().collect(Collectors.groupingBy(Function.identity(),Collectors.counting()))&apos;&#x0D;&#x0A;- Original project: &apos;com.abhinav.interview&apos;&#x0D;&#x0A;- Variable name: &apos;collect&apos;&#x0D;&#x0A;- Destination method: &apos;com.abhinav.interview.coding.review.ArraysExample.main(...)&apos;&#x0D;&#x0A;- Variable expression: &apos;Arrays.stream(arr).boxed().collect(Collectors.groupingBy(Function.identity(),Collectors.counting()))&apos;&#x0D;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;collect&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;com.abhinav.interview.coding.review{ArraysExample.java" name="collect" replace="true" replaceAllInThisFile="false" selection="267 100" stamp="1742399426140" varType="false" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;collect&apos; from expression &apos;employees.keySet().stream().collect(Collectors.toSet())&apos;&#x0D;&#x0A;- Original project: &apos;com.abhinav.interview&apos;&#x0D;&#x0A;- Variable name: &apos;collect&apos;&#x0D;&#x0A;- Destination method: &apos;com.abhinav.interview.coding.review.MapsExample.main(...)&apos;&#x0D;&#x0A;- Variable expression: &apos;employees.keySet().stream().collect(Collectors.toSet())&apos;&#x0D;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;collect&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;com.abhinav.interview.coding.review{MapsExample.java" name="collect" replace="true" replaceAllInThisFile="false" selection="353 55" stamp="1742400483825" varType="false" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;collect&apos; from expression &apos;employees.values().stream().collect(Collectors.toList())&apos;&#x0D;&#x0A;- Original project: &apos;com.abhinav.interview&apos;&#x0D;&#x0A;- Variable name: &apos;collect&apos;&#x0D;&#x0A;- Destination method: &apos;com.abhinav.interview.coding.review.MapsExample.main(...)&apos;&#x0D;&#x0A;- Variable expression: &apos;employees.values().stream().collect(Collectors.toList())&apos;&#x0D;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;collect&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;com.abhinav.interview.coding.review{MapsExample.java" name="collect" replace="true" replaceAllInThisFile="false" selection="376 56" stamp="1742400616347" varType="false" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;collect&apos; from expression &apos;listOfMaps.stream().flatMap(s -&gt; s.entrySet().stream()).collect(Collectors.toSet())&apos;&#x0D;&#x0A;- Original project: &apos;com.abhinav.interview&apos;&#x0D;&#x0A;- Variable name: &apos;collect&apos;&#x0D;&#x0A;- Destination method: &apos;com.abhinav.interview.coding.review.MapsExample.main(...)&apos;&#x0D;&#x0A;- Variable expression: &apos;listOfMaps.stream().flatMap(s -&gt; s.entrySet().stream()).collect(Collectors.toSet())&apos;&#x0D;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;collect&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;com.abhinav.interview.coding.review{MapsExample.java" name="collect" replace="true" replaceAllInThisFile="false" selection="595 83" stamp="1742400944273" varType="false" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;collect2&apos; from expression &apos;listOfMaps.stream().flatMap(s -&gt; s.keySet().stream()).collect(Collectors.toSet())&apos;&#x0D;&#x0A;- Original project: &apos;com.abhinav.interview&apos;&#x0D;&#x0A;- Variable name: &apos;collect2&apos;&#x0D;&#x0A;- Destination method: &apos;com.abhinav.interview.coding.review.MapsExample.main(...)&apos;&#x0D;&#x0A;- Variable expression: &apos;listOfMaps.stream().flatMap(s -&gt; s.keySet().stream()).collect(Collectors.toSet())&apos;&#x0D;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;collect2&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;com.abhinav.interview.coding.review{MapsExample.java" name="collect2" replace="true" replaceAllInThisFile="false" selection="810 81" stamp="1742402037116" varType="false" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;limit&apos; from expression &apos;numbers.stream().sorted().skip(1).limit(1)&apos;&#x0D;&#x0A;- Original project: &apos;com.abhinav.interview&apos;&#x0D;&#x0A;- Variable name: &apos;limit&apos;&#x0D;&#x0A;- Destination method: &apos;com.abhinav.interview.coding.SecondHighestFinder.main(...)&apos;&#x0D;&#x0A;- Variable expression: &apos;numbers.stream().sorted().skip(1).limit(1)&apos;&#x0D;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;limit&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;com.abhinav.interview.coding{SecondHighestFinder.java" name="limit" replace="true" replaceAllInThisFile="false" selection="234 42" stamp="1742472468060" varType="false" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;orElse&apos; from expression &apos;numbers.stream().distinct().sorted().skip(1).limit(1).findFirst().orElse(0)&apos;&#x0D;&#x0A;- Original project: &apos;com.abhinav.interview&apos;&#x0D;&#x0A;- Variable name: &apos;orElse&apos;&#x0D;&#x0A;- Destination method: &apos;com.abhinav.interview.coding.SecondHighestFinder.main(...)&apos;&#x0D;&#x0A;- Variable expression: &apos;numbers.stream().distinct().sorted().skip(1).limit(1).findFirst().orElse(0)&apos;&#x0D;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;orElse&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;com.abhinav.interview.coding{SecondHighestFinder.java" name="orElse" replace="true" replaceAllInThisFile="false" selection="267 75" stamp="1742472587373" varType="false" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;sortedNames&apos; from expression &apos;studentList.stream().sorted(Comparator.comparing(Student::getName)).collect(Collectors.toList())&apos;&#x0D;&#x0A;- Original project: &apos;com.abhinav.interview&apos;&#x0D;&#x0A;- Variable name: &apos;sortedNames&apos;&#x0D;&#x0A;- Destination method: &apos;com.abhinav.intrvw.coding.CodingExample1.main(...)&apos;&#x0D;&#x0A;- Variable expression: &apos;studentList.stream().sorted(Comparator.comparing(Student::getName)).collect(Collectors.toList())&apos;&#x0D;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;sortedNames&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;com.abhinav.intrvw.coding{CodingExample1.java" name="sortedNames" replace="true" replaceAllInThisFile="false" selection="647 96" stamp="1742572928939" varType="false" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;collect&apos; from expression &apos;studentMap.entrySet().stream().sorted(Map.Entry.comparingByValue(Comparator.comparing(Student::getName))).collect(Collectors.toList())&apos;&#x0D;&#x0A;- Original project: &apos;com.abhinav.interview&apos;&#x0D;&#x0A;- Variable name: &apos;collect&apos;&#x0D;&#x0A;- Destination method: &apos;com.abhinav.intrvw.coding.CodingExample1.main(...)&apos;&#x0D;&#x0A;- Variable expression: &apos;studentMap.entrySet().stream().sorted(Map.Entry.comparingByValue(Comparator.comparing(Student::getName))).collect(Collectors.toList())&apos;&#x0D;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;collect&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;com.abhinav.intrvw.coding{CodingExample1.java" name="collect" replace="true" replaceAllInThisFile="false" selection="1151 134" stamp="1742574414688" varType="false" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;collect&apos; from expression &apos;studentMap.entrySet().stream().sorted(Map.Entry.comparingByValue(Comparator.comparing(Student::getName))).collect(Collectors.toMap(Map.Entry::getKey,Map.Entry::getValue))&apos;&#x0D;&#x0A;- Original project: &apos;com.abhinav.interview&apos;&#x0D;&#x0A;- Variable name: &apos;collect&apos;&#x0D;&#x0A;- Destination method: &apos;com.abhinav.intrvw.coding.CodingExample1.main(...)&apos;&#x0D;&#x0A;- Variable expression: &apos;studentMap.entrySet().stream().sorted(Map.Entry.comparingByValue(Comparator.comparing(Student::getName))).collect(Collectors.toMap(Map.Entry::getKey,Map.Entry::getValue))&apos;&#x0D;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;collect&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;com.abhinav.intrvw.coding{CodingExample1.java" name="collect" replace="true" replaceAllInThisFile="false" selection="1159 171" stamp="1742574606067" varType="false" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;array&apos; from expression &apos;Arrays.stream(strings).sorted(Comparator.reverseOrder()).toArray()&apos;&#x0D;&#x0A;- Original project: &apos;com.abhinav.interview&apos;&#x0D;&#x0A;- Variable name: &apos;array&apos;&#x0D;&#x0A;- Destination method: &apos;com.abhinav.interview.coding.review.ArraysExample.main(...)&apos;&#x0D;&#x0A;- Variable expression: &apos;Arrays.stream(strings).sorted(Comparator.reverseOrder()).toArray()&apos;&#x0D;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;array&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;com.abhinav.interview.coding.review{ArraysExample.java" name="array" replace="true" replaceAllInThisFile="false" selection="549 66" stamp="1742575572744" varType="false" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;asList&apos; from expression &apos;Arrays.asList(strings)&apos;&#x0D;&#x0A;- Original project: &apos;com.abhinav.interview&apos;&#x0D;&#x0A;- Variable name: &apos;asList&apos;&#x0D;&#x0A;- Destination method: &apos;com.abhinav.interview.coding.review.ArraysExample.main(...)&apos;&#x0D;&#x0A;- Variable expression: &apos;Arrays.asList(strings)&apos;&#x0D;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;asList&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;com.abhinav.interview.coding.review{ArraysExample.java" name="asList" replace="true" replaceAllInThisFile="false" selection="718 22" stamp="1742576123265" varType="false" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;collect&apos; from expression &apos;listOfStrings.stream().sorted(Comparator.comparingInt(String::length)).collect(Collectors.toList())&apos;&#x0D;&#x0A;- Original project: &apos;com.abhinav.interview&apos;&#x0D;&#x0A;- Variable name: &apos;collect&apos;&#x0D;&#x0A;- Destination method: &apos;com.abhinav.interview.coding.review.ArraysExample.main(...)&apos;&#x0D;&#x0A;- Variable expression: &apos;listOfStrings.stream().sorted(Comparator.comparingInt(String::length)).collect(Collectors.toList())&apos;&#x0D;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;collect&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;com.abhinav.interview.coding.review{ArraysExample.java" name="collect" replace="true" replaceAllInThisFile="false" selection="774 99" stamp="1742576240419" varType="false" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;collect&apos; from expression &apos;str.chars().mapToObj(ch -&gt; (char)ch).collect(Collectors.groupingBy(Function.identity(),Collectors.counting()))&apos;&#x0D;&#x0A;- Original project: &apos;com.abhinav.interview&apos;&#x0D;&#x0A;- Variable name: &apos;collect&apos;&#x0D;&#x0A;- Destination method: &apos;com.abhinav.intrvw.coding.CodingPractice.main(...)&apos;&#x0D;&#x0A;- Variable expression: &apos;str.chars().mapToObj(ch -&gt; (char)ch).collect(Collectors.groupingBy(Function.identity(),Collectors.counting()))&apos;&#x0D;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;collect&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;com.abhinav.intrvw.coding{CodingPractice.java" name="collect" replace="true" replaceAllInThisFile="false" selection="224 112" stamp="1742577344051" varType="false" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;collect2&apos; from expression &apos;strings.stream().flatMapToInt(ch -&gt; ch.chars()).mapToObj(ch -&gt; (char)ch).collect(Collectors.groupingBy(Function.identity(),Collectors.counting()))&apos;&#x0D;&#x0A;- Original project: &apos;com.abhinav.interview&apos;&#x0D;&#x0A;- Variable name: &apos;collect2&apos;&#x0D;&#x0A;- Destination method: &apos;com.abhinav.intrvw.coding.CodingPractice.main(...)&apos;&#x0D;&#x0A;- Variable expression: &apos;strings.stream().flatMapToInt(ch -&gt; ch.chars()).mapToObj(ch -&gt; (char)ch).collect(Collectors.groupingBy(Function.identity(),Collectors.counting()))&apos;&#x0D;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;collect2&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;com.abhinav.intrvw.coding{CodingPractice.java" name="collect2" replace="true" replaceAllInThisFile="false" selection="554 146" stamp="1742577551890" varType="false" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;collect3&apos; from expression &apos;map1.entrySet().stream().map(s -&gt; s.getKey()).collect(Collectors.toList())&apos;&#x0D;&#x0A;- Original project: &apos;com.abhinav.interview&apos;&#x0D;&#x0A;- Variable name: &apos;collect3&apos;&#x0D;&#x0A;- Destination method: &apos;com.abhinav.intrvw.coding.CodingPractice.main(...)&apos;&#x0D;&#x0A;- Variable expression: &apos;map1.entrySet().stream().map(s -&gt; s.getKey()).collect(Collectors.toList())&apos;&#x0D;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;collect3&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;com.abhinav.intrvw.coding{CodingPractice.java" name="collect3" replace="true" replaceAllInThisFile="false" selection="1299 74" stamp="1742578212717" varType="false" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;limit&apos; from expression &apos;numbers.stream().distinct().sorted(Comparator.reverseOrder()).skip(1).limit(1)&apos;&#x0D;&#x0A;- Original project: &apos;com.abhinav.interview&apos;&#x0D;&#x0A;- Variable name: &apos;limit&apos;&#x0D;&#x0A;- Destination method: &apos;com.abhinav.intrvw.coding.CodingPractice1.main(...)&apos;&#x0D;&#x0A;- Variable expression: &apos;numbers.stream().distinct().sorted(Comparator.reverseOrder()).skip(1).limit(1)&apos;&#x0D;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;limit&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;com.abhinav.intrvw.coding{CodingPractice1.java" name="limit" replace="true" replaceAllInThisFile="false" selection="644 78" stamp="1742618932934" varType="false" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;collect&apos; from expression &apos;numbers.stream().filter(s -&gt; !unique.add(s)).collect(Collectors.toList())&apos;&#x0D;&#x0A;- Original project: &apos;com.abhinav.interview&apos;&#x0D;&#x0A;- Variable name: &apos;collect&apos;&#x0D;&#x0A;- Destination method: &apos;com.abhinav.intrvw.coding.DuplicatesInList.main(...)&apos;&#x0D;&#x0A;- Variable expression: &apos;numbers.stream().filter(s -&gt; !unique.add(s)).collect(Collectors.toList())&apos;&#x0D;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;collect&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;com.abhinav.intrvw.coding{DuplicatesInList.java" name="collect" replace="true" replaceAllInThisFile="false" selection="383 73" stamp="1742619457059" varType="false" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;collect2&apos; from expression &apos;numbers.stream().collect(Collectors.groupingBy(Function.identity(),Collectors.counting()))&apos;&#x0D;&#x0A;- Original project: &apos;com.abhinav.interview&apos;&#x0D;&#x0A;- Variable name: &apos;collect2&apos;&#x0D;&#x0A;- Destination method: &apos;com.abhinav.intrvw.coding.DuplicatesInList.main(...)&apos;&#x0D;&#x0A;- Variable expression: &apos;numbers.stream().collect(Collectors.groupingBy(Function.identity(),Collectors.counting()))&apos;&#x0D;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;collect2&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;com.abhinav.intrvw.coding{DuplicatesInList.java" name="collect2" replace="true" replaceAllInThisFile="false" selection="566 90" stamp="1742619567938" varType="false" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;collect3&apos; from expression &apos;collect2.entrySet().stream().filter(entry -&gt; entry.getValue() &gt; 1).map(Map.Entry::getKey).collect(Collectors.toList())&apos;&#x0D;&#x0A;- Original project: &apos;com.abhinav.interview&apos;&#x0D;&#x0A;- Variable name: &apos;collect3&apos;&#x0D;&#x0A;- Destination method: &apos;com.abhinav.intrvw.coding.DuplicatesInList.main(...)&apos;&#x0D;&#x0A;- Variable expression: &apos;collect2.entrySet().stream().filter(entry -&gt; entry.getValue() &gt; 1).map(Map.Entry::getKey).collect(Collectors.toList())&apos;&#x0D;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;collect3&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;com.abhinav.intrvw.coding{DuplicatesInList.java" name="collect3" replace="true" replaceAllInThisFile="false" selection="718 116" stamp="1742619691085" varType="false" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;collect&apos; from expression &apos;employees.stream().collect(Collectors.groupingBy(Employee::getDepartment))&apos;&#x0D;&#x0A;- Original project: &apos;com.abhinav.interview&apos;&#x0D;&#x0A;- Variable name: &apos;collect&apos;&#x0D;&#x0A;- Destination method: &apos;com.abhinav.intrvw.coding.EmployeeDriver.main(...)&apos;&#x0D;&#x0A;- Variable expression: &apos;employees.stream().collect(Collectors.groupingBy(Employee::getDepartment))&apos;&#x0D;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;collect&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;com.abhinav.intrvw.coding{EmployeeDriver.java" name="collect" replace="true" replaceAllInThisFile="false" selection="523 74" stamp="1742620130524" varType="false" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;collect&apos; from expression &apos;employees.stream().collect(Collectors.groupingBy(Employee::getDepartment,Collectors.mapping(Employee::getName,Collectors.toList())))&apos;&#x0D;&#x0A;- Original project: &apos;com.abhinav.interview&apos;&#x0D;&#x0A;- Variable name: &apos;collect&apos;&#x0D;&#x0A;- Destination method: &apos;com.abhinav.intrvw.coding.EmployeeDriver.main(...)&apos;&#x0D;&#x0A;- Variable expression: &apos;employees.stream().collect(Collectors.groupingBy(Employee::getDepartment,Collectors.mapping(Employee::getName,Collectors.toList())))&apos;&#x0D;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;collect&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;com.abhinav.intrvw.coding{EmployeeDriver.java" name="collect" replace="true" replaceAllInThisFile="false" selection="547 133" stamp="1742620370767" varType="false" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;collect2&apos; from expression &apos;employees.stream().sorted(Comparator.comparing(Employee::getName).reversed()).collect(Collectors.toList())&apos;&#x0D;&#x0A;- Original project: &apos;com.abhinav.interview&apos;&#x0D;&#x0A;- Variable name: &apos;collect2&apos;&#x0D;&#x0A;- Destination method: &apos;com.abhinav.intrvw.coding.EmployeeDriver.main(...)&apos;&#x0D;&#x0A;- Variable expression: &apos;employees.stream().sorted(Comparator.comparing(Employee::getName).reversed()).collect(Collectors.toList())&apos;&#x0D;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;collect2&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;com.abhinav.intrvw.coding{EmployeeDriver.java" name="collect2" replace="true" replaceAllInThisFile="false" selection="787 106" stamp="1742620723300" varType="false" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;first&apos; from expression &apos;employees.stream().sorted(Comparator.comparing(Employee::getSalary).reversed()).findFirst()&apos;&#x0D;&#x0A;- Original project: &apos;com.abhinav.interview&apos;&#x0D;&#x0A;- Variable name: &apos;first&apos;&#x0D;&#x0A;- Destination method: &apos;com.abhinav.intrvw.coding.EmployeeDriver.main(...)&apos;&#x0D;&#x0A;- Variable expression: &apos;employees.stream().sorted(Comparator.comparing(Employee::getSalary).reversed()).findFirst()&apos;&#x0D;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;first&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;com.abhinav.intrvw.coding{EmployeeDriver.java" name="first" replace="true" replaceAllInThisFile="false" selection="1001 91" stamp="1742621106199" varType="false" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;collect&apos; from expression &apos;employees.stream().filter(s -&gt; s.getSalary() &gt; 50000).collect(Collectors.toList())&apos;&#x0D;&#x0A;- Original project: &apos;com.abhinav.interview&apos;&#x0D;&#x0A;- Variable name: &apos;collect&apos;&#x0D;&#x0A;- Destination method: &apos;com.abhinav.intrvw.coding.EmployeeDriver.main(...)&apos;&#x0D;&#x0A;- Variable expression: &apos;employees.stream().filter(s -&gt; s.getSalary() &gt; 50000).collect(Collectors.toList())&apos;&#x0D;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;collect&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;com.abhinav.intrvw.coding{EmployeeDriver.java" name="collect" replace="true" replaceAllInThisFile="false" selection="1234 80" stamp="1742621428326" varType="false" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;collect4&apos; from expression &apos;numbers.stream().filter(s -&gt; s % 2 != 0).collect(Collectors.toList())&apos;&#x0D;&#x0A;- Original project: &apos;com.abhinav.interview&apos;&#x0D;&#x0A;- Variable name: &apos;collect4&apos;&#x0D;&#x0A;- Destination method: &apos;com.abhinav.intrvw.coding.CodingPractice.main(...)&apos;&#x0D;&#x0A;- Variable expression: &apos;numbers.stream().filter(s -&gt; s % 2 != 0).collect(Collectors.toList())&apos;&#x0D;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;collect4&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;com.abhinav.intrvw.coding{CodingPractice.java" name="collect4" replace="true" replaceAllInThisFile="false" selection="1527 66" stamp="1742621664796" varType="false" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;reduce&apos; from expression &apos;numbers.stream().reduce((a,b) -&gt; a + b)&apos;&#x0D;&#x0A;- Original project: &apos;com.abhinav.interview&apos;&#x0D;&#x0A;- Variable name: &apos;reduce&apos;&#x0D;&#x0A;- Destination method: &apos;com.abhinav.intrvw.coding.CodingPractice.main(...)&apos;&#x0D;&#x0A;- Variable expression: &apos;numbers.stream().reduce((a,b) -&gt; a + b)&apos;&#x0D;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;reduce&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;com.abhinav.intrvw.coding{CodingPractice.java" name="reduce" replace="true" replaceAllInThisFile="false" selection="1660 37" stamp="1742621743001" varType="false" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;min&apos; from expression &apos;numbers.stream().min(Comparator.naturalOrder())&apos;&#x0D;&#x0A;- Original project: &apos;com.abhinav.interview&apos;&#x0D;&#x0A;- Variable name: &apos;min&apos;&#x0D;&#x0A;- Destination method: &apos;com.abhinav.intrvw.coding.CodingPractice.main(...)&apos;&#x0D;&#x0A;- Variable expression: &apos;numbers.stream().min(Comparator.naturalOrder())&apos;&#x0D;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;min&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;com.abhinav.intrvw.coding{CodingPractice.java" name="min" replace="true" replaceAllInThisFile="false" selection="1818 47" stamp="1742621856278" varType="false" version="1.0"/>
</session>